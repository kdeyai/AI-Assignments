# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16oHArDMhdadZGRqjiB2O5IL2fnWHMRsk
"""

!pip install durable-rules

from durable.lang import *

with ruleset('courses'):
    # will be triggered by 'interests' facts
    @when_all((m.name == 'Linear Algebra') & (m.interest == 'AI/ML') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'AI/ML' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Linear Algebra') & (m.interest == 'AI/ML') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.area == 'Probability and statistics') & (m.branch == 'AI/ML') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'AI/ML' })
        c.assert_fact('research', { 'interest': 'yes' })
    
    @when_all((m.area == 'Probability and statistics') & (m.branch == 'AI/ML') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })

    @when_all((m.name == 'Machine Learning') & (m.interest == 'AI/ML') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'AI/ML' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Machine Learning') & (m.interest == 'AI/ML') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.area == 'Deep Learning') & (m.branch == 'AI/ML') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'AI/ML' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Operating System') & (m.interest == 'Systems') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Operating System') & (m.interest == 'Systems') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.area == 'Compiler') & (m.branch == 'Systems') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })
    
    @when_all((m.area == 'Compiler') & (m.branch == 'Systems') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })      

    @when_all((m.name == 'Basic Algorithms') & (m.interest == 'Theory') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Basic Algorithms') & (m.interest == 'Theory') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.area == 'Randomized Algorithms') & (m.branch == 'Theory') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })
    
    @when_all((m.area == 'Randomized Algorithms') & (m.branch == 'Theory') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.name == 'Approximation Algorithms') & (m.interest == 'Theory') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })

    @when_all((m.name == 'Approximation Algorithms') & (m.interest == 'Theory') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })  

    @when_all((m.area == 'Modern Algorithm Design') & (m.branch == 'Theory') & (m.grades>=8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'yes' })
    
    @when_all((m.area == 'Modern Algorithm Design') & (m.branch == 'Theory') & (m.grades<8))
    def topics(c):
        c.assert_fact('job roles', { 'field': 'SDE' })
        c.assert_fact('research', { 'interest': 'no' })       

    @when_all(+m.subject)
    def output(c):
        print('Fact: {0} {1} {2}'.format(c.m.subject, c.m.predicate, c.m.object))

with ruleset('job roles'):

    @when_all((m.field == 'SDE'))
    def job(d):
        d.assert_fact({ 'role': 'Software Development Engineer' })
        d.assert_fact({ 'role': 'Software Engineer in Test' })
        d.assert_fact({ 'role': 'Devops Engineer' })
        d.assert_fact({ 'role': 'FrontEnd Engineer' })
        d.assert_fact({ 'role': 'Business analyst' })
        d.assert_fact({ 'role': 'Data analyst' })


    @when_all((m.field == 'AI/ML'))
    def job(d):
        d.assert_fact({ 'role': 'Software Development Engineer' })
        d.assert_fact({ 'role': 'Machine Learning Engineer' })
        d.assert_fact({ 'role': 'MLOps Engineer' })
        d.assert_fact({ 'role': 'Applied Scientist' })
        d.assert_fact({ 'role': 'Research Scientist' })
        d.assert_fact({ 'role': 'Data Scientist' })
        d.assert_fact({ 'role': 'Data analyst' })

    @when_all(+m.role)
    def output(d):
        print('Fact: {0}'.format(d.m.role))

with ruleset('research'):
    @when_all((m.interest == 'yes'))
    def rnd(e):
        e.assert_fact({ 'subject': 'You can opt for Research Assistant positions or apply for a Ph.D. '})

    @when_all((m.interest == 'no'))
    def rnd(e):
        e.assert_fact({ 'subject': 'You should not opt for Research roles '})

    @when_all(+m.subject)
    def output(c):
        print('Fact: {0}'.format(c.m.subject))

course_name=input('Enter the name of the course you have taken')
course_interest=input('Enter your interest')
course_grades=int(input('Enter the grades you received'))
assert_fact('courses', { 'name': course_name,'interest':course_interest ,'grades': course_grades })

